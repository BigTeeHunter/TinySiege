<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRoom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x - (sprite_width/2);
y = mouse_y + (sprite_height/2);
image_speed = 0;
_canPlaceThisShit = false;
_isAlreadyPlaced = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If not already placed do this
if (!_isAlreadyPlaced)
{
    x = mouse_x - (sprite_width/2);
    y = mouse_y - (sprite_height/2);
    _canPlaceThisShit = false;
    depth = 100;
    
    var roomCount = instance_number(newRoom) - 1;
    
    collisions[roomCount] = instance_find(fukinFloor,0);
    var i = 0;
    var idx = 0;
    for (i = 0; i &lt;= roomCount; i++)
    {
        var obj = instance_find(newRoom,i);
        if (obj.id != id)
            collisions[idx++] = obj
    }
    
    // This is shit coz it only snaps to the side of a block, but doesn't align internally (ie, cant snap directly on top of another, which is crap)
    // lol
    
    var horIdx = 0, horDist = min(abs(mouse_x + (sprite_width/2) - collisions[0].x), abs((mouse_x - (sprite_width/2)) - (collisions[0].x + collisions[0].sprite_width)));
    var verIdx = 0, verDist = min(abs(mouse_y + (sprite_height/2) - collisions[0].y), abs((mouse_y - (sprite_height/2)) - (collisions[0].y + collisions[0].sprite_height)));
    
    for (i = 1; i &lt;= roomCount; i++)
    {
        var newHorDist = min(abs(mouse_x + (sprite_width/2) - collisions[i].x), abs((mouse_x - (sprite_width/2)) - (collisions[i].x + collisions[i].sprite_width)));
        if (newHorDist &lt; horDist)
        {
            horIdx = i;
            horDist = newHorDist;
        }
        var newVerDist = min(abs(mouse_y + (sprite_height/2) - collisions[i].y), abs((mouse_y - (sprite_height/2)) - (collisions[i].y + collisions[i].sprite_height)));
        if (newVerDist &lt; verDist)
        {
            verIdx = i;
            verDist = newVerDist;
        }
    }
    
    // If its close snap that shit
    var snapDist = 32; // make this a percentage of the sprite_width
    if (collisions[horIdx].x &gt; x &amp;&amp; abs(collisions[horIdx].x - (x + sprite_width)) &lt;= snapDist)
    {
        x = collisions[horIdx].x - sprite_width;
    }
    else if (abs((collisions[horIdx].x + collisions[horIdx].sprite_width) - x) &lt;= snapDist)
    {
        x = collisions[horIdx].x + collisions[horIdx].sprite_width;
    }
    
    if (collisions[verIdx].y &gt; y &amp;&amp; abs(collisions[verIdx].y - (y + sprite_height)) &lt;= snapDist)
    {
        y = collisions[verIdx].y - sprite_height;
    }
    else if (abs((collisions[verIdx].y + collisions[verIdx].sprite_height) - y) &lt;= snapDist)
    {
        y = collisions[verIdx].y + collisions[verIdx].sprite_height;
    }
    
    var colliding = false;
    for (i = 0; i &lt;= roomCount &amp;&amp; colliding==false; i++)
    {
        collisions[i].image_index = 0;
        colliding = place_meeting(x,y,collisions[i]);
    }
    collisions[horIdx].image_index = 2;
    
    _canPlaceThisShit = !colliding;
    if (_canPlaceThisShit)
        image_index = 1;
    else
        image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!_isAlreadyPlaced &amp;&amp; _canPlaceThisShit)
{
    _isAlreadyPlaced = true;
    depth = 500;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
